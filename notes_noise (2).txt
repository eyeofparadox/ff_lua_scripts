noise notes

Noise Parameters
	octaves, the number of layers of noise applied—or the amount of detail in the noise. typically, the changes in each octave are in converse powers of two. as frequency doubles, amplitude is halved. variations in these standards are possible in more exotic noise functions.
	lacunarity
		corresponds to the increase in frequency in the noise of each octave.  higher lacunarity values provide more small features.
	persistence
		corresponds to the decrease in amplitude in the noise of each octave. persistence determines how much influence smaller features have on the composite noise.

Musgrave Noise vs Perlin Noise
	Musgrave noise is a type of fractal noise that uses simple Perlin noise to create a detailed texture with a self-similar appearance at different scales. Perlin noise is a procedural texture primitive and gradient noise that visual effects artists use to make computer graphics appear more realistic. 
	Here are some differences between Musgrave noise and Perlin noise: 
		Musgrave noise
			Musgrave noise uses an additive cascade to add values together, resulting in an uneven, homogeneous, and isotropic result that's more similar to real terrain. It also allows more control over how octaves are combined. For example, Musgrave noise can create peaks and valleys with different roughness values, like mountains rising out of plains. It can also create sharp peaks by calculating the absolute value of the noise, creating canyons, and then flipping the surface upside down. 
		Perlin noise
			Perlin noise has a pseudo-random appearance, but all of its visual details are the same size. Simple Perlin noise can simulate natural phenomena like water surfaces and smooth hills. Fractal noise adds complexity and produces more visually appealing results. In Blender, the Noise Texture node can evaluate a fractal Perlin noise at input texture coordinates. It can be used for a single Perlin noise evaluation, or for combining multiple octaves with increasingly finer detail. 

Distance Mapping
	Chebyshev distance mapping equation
		The Chebyshev distance calculation, commonly known as the "maximum metric" in mathematics, measures distance between two points as the maximum difference over any of their axis values. In a 2D grid, for instance, if we have two points (x1, y1), and (x2, y2), the Chebyshev distance between is:
				max(y2 - y1, x2 - x1)
				dist = ((x1 - x2)^2 + (y1 - y2)^2) / (1 + (x1 - x2)^2 + (y1 - y2)^2)

	Minkowski  distance mapping
	•••
		p = get_intslider_input(P)
		if p > 5 then
		-- need equation to derive 'p' from 6 - 10 as geometric growth from 5 - 100
		end

		function distance (x1, y1, x2, y2)
			-- dist = math.sqrt((x1-x2)^2+(y1-y2)^2)
			local pe = 1/p
			dist = (math.abs(x1 - x2)^p + math.abs(y1 - y2)^p)^pe
			return dist
		end

		-- Minkowski distance mapping
		if p > 5 then
			-- Calculate the common ratio for geometric progression
			local r = math.pow(20, 1/5)  -- Common ratio

			-- Calculate the value of 'p' based on the step
			local step = p - 5
			p = 5 * math.pow(r, step)
		end

		function distance(x1, y1, x2, y2)
			-- Minkowski distance calculation
			local pe = 1 / p
			local dist = (math.abs(x1 - x2)^p + math.abs(y1 - y2)^p)^pe
			return dist
		end
	•••

•••
What equation or algorithym would go from 5 to 100 in five expanding steps?
	• To create an equation or algorithm that goes from 5 to 100 in five expanding steps, you can use a geometric progression. In a geometric progression, each term is found by multiplying the previous term by a constant ratio. Here’s how you can set it up:
	• Identify the terms:
		You want to start at 5 and end at 100.
		You need 5 steps, so you will have 6 terms (including the starting point).
	• Geometric Progression Formula:
		The general formula for the ( n )-th term of a geometric progression is:
				an​=a1​⋅r(n−1)
		Where:
			( a_n ) is the ( n )-th term.
			( a_1 ) is the first term (5 in this case).
			( r ) is the common ratio.
			( n ) is the term number.
	• Calculate the Common Ratio:
	• You need to find the common ratio ( r ) such that the 6th term is 100.
		Using the formula for the 6th term:
			100=5·r^5
		Solve for ( r ):
			r^5=100/5=20
			r=5√20≈1.82
	• Generate the Sequence:
		Now that you have the common ratio ( r ≈ 1.82 ), you can generate the terms:
			( a_1 = 5 )
			( a_2 = 5 · 1.82 ≈ 9.1 )
			( a_3 = 9.1 · 1.82 ≈ 16.56 )
			( a_4 = 16.56 · 1.82 ≈ 30.12 )
			( a_5 = 30.12 · 1.82 ≈ 54.82 )
			( a_6 = 54.82 · 1.82 ≈ 100 )
		So, the sequence from 5 to 100 in five expanding steps is approximately: 5, 9.1, 16.56, 30.12, 54.82, and 100.

•••
Could you give me the formula for this in Lua code?
	• Here’s a Lua script that calculates the terms of a geometric progression from 5 to 100 in five steps:
	•••
		-- Define the initial term and the common ratio
		local a1 = 5
		local r = math.pow(20, 1/5)  -- Common ratio calculated as the 5th root of 20

		-- Function to calculate the n-th term of the geometric progression
		local function geometric_term(a1, r, n)
			return a1 * math.pow(r, n-1)
		end

		-- Calculate and print the terms
		for n = 1, 6 do
			local term = geometric_term(a1, r, n)
			print(string.format("Term %d: %.2f", n, term)
		end
	•••
	• This script defines the initial term ( a1 ) and calculates the common ratio ( r ). It then uses a function to compute each term of the geometric progression and prints the terms from the first to the sixth (including the starting point).
	• When you run this script, it will output the terms of the sequence, showing the progression from 5 to 100 in five steps. 

•••
Here's what I had to this point:-- Minkowski  distance mapping
	•••
		p = get_intslider_input(P)
		if p > 5 then
		-- need equation to derive 'p' from 6 - 10 as geometric growth from 5 - 100
		end

		function distance (x1, y1, x2, y2)
			-- dist = math.sqrt((x1-x2)^2+(y1-y2)^2)
			local pe = 1/p
			dist = (math.abs(x1 - x2)^p + math.abs(y1 - y2)^p)^pe
			return dist
		end
	•••
	• Got it! To derive p from 6 to 10 as geometric growth from 5 to 100, you can use the geometric progression formula we discussed earlier. Here’s how you can integrate it into your Lua script:
	• Calculate the Common Ratio:
	• The common ratio ( r ) for the geometric progression from 5 to 100 in 5 steps is:
		r = 5 root 20 ​≈ 1.82 or r = math.pow(20, 5) -- ≈ 1.82 
	• Update the Lua Script:
		Use this ratio to calculate the value of p for each step from 6 to 10.
		Here’s the updated Lua script:
	•••
	-- Minkowski distance mapping
	p = get_intslider_input(P)

	if p > 5 then
		-- Calculate the common ratio for geometric progression
		local r = math.pow(20, 1/5)  -- Common ratio

		-- Calculate the value of 'p' based on the step
		local step = p - 5
		p = 5 * math.pow(r, step)
	end

	function distance(x1, y1, x2, y2)
		-- Minkowski distance calculation
		local pe = 1 / p
		local dist = (math.abs(x1 - x2)^p + math.abs(y1 - y2)^p)^pe
		return dist
	end
	•••
	• In this script:
		The common ratio ( r ) is calculated as the 5th root of 20.
		The value of p is adjusted based on the step from 6 to 10 using the geometric progression formula.
		This should give you the desired geometric growth for p from 5 to 100 in five steps.

•••
This filter combines a custom map script, used to generate directional lighting and shadowing, with Filter Forge's built in environment lighting and ambient occlusion to achieve maximum realism. 
	• Light Pitch is the upward angle of the light and should be between 0 (parallel to the surface) and 90 (straight down).  
	• Light Yaw starts from the right (0 degrees) and moves up (90 degrees is from the top).
	• The Shadow Step settings control the quality of the shadow.  Smaller step distances means better quality but requires higher step counts (slower render time) to avoid shadows from being cut short.

•••
What does 'lerp' mean? What did the term derive from?
	• The term “lerp” stands for linear interpolation. It’s a mathematical method used to find a value between two known values. This technique is widely used in computer graphics, game development, and other fields to create smooth transitions and animations.
	• Derivation:
	• The term “lerp” is derived from the words “linear interpolation”. In computer graphics jargon, it is often used as both a verb and a noun. For example, you might hear someone say, "The algorithm lerps between the two endpoints"1.
	• How Lerp Works:
	• The basic formula for linear interpolation is:
		C=A+t⋅(B−A)
	• Where:
		( A ) and ( B ) are the known values.
		( t ) is a parameter between 0 and 1 that determines the interpolation point.
		( C ) is the interpolated value.
	• Applications:
		Computer Graphics: Lerp is used to interpolate between colors, positions, and other attributes to create smooth transitions.
		Game Development: It helps in animating characters and objects smoothly between two points.
		Physics Simulations: Lerp is used to simulate motion and other physical phenomena.
		
